{
    "Create custom react function component": {
        "prefix": ["tsc"],
        "body": [
            "import { FC } from 'react'",
            "import { useTranslation } from 'react-i18next';",
            "",
            "import { classNames } from 'shared/lib/classNames/classNames';",
            "import styles from './${TM_FILENAME_BASE}.module.scss';",
            "",
            "interface ${TM_FILENAME_BASE}Props {",
            "\tclassName?: string;",
            "}",
            "",
            "export const ${TM_FILENAME_BASE}: FC<${TM_FILENAME_BASE}Props> = (props) => {",
            "\tconst { className } = props;",
            "\tconst { t } = useTranslation();",
            "",
            "\treturn (",
            "\t\t<div className={classNames(styles.${TM_FILENAME_BASE/(^.)/${1:/downcase}/}, {}, [className])}>",
            "\t\t\t$0",
            "\t\t</div>",
            " );",
            "}"
        ],
        "description": "create React component with classnames & scss imports"
    },

    "Create test": {
        "scope": "typescript, typescriptreact",
        "prefix": ["test"],
        "body": [
            "describe('$TM_FILENAME_BASE', () => {",
            " test('$1', () => {",
            " expect().toEqual()",
            " })",
            "})"
        ],
        "description": "Create template test"
    },

    "Create redux toolkit slice": {
        "prefix": "slice",
        "body": [
            "import { createSlice } from '@reduxjs/toolkit'",
            "import { ${TM_FILENAME_BASE/([^A-Z]+)(.*)/${1:/capitalize}/}Schema } from '../types/${TM_FILENAME_BASE/([^A-Z]+)(.*)/${1}/}Schema'",
            "",
            "const initialState: ${TM_FILENAME_BASE/([^A-Z]+)(.*)/${1:/capitalize}/}Schema = {}",
            "",
            "export const ${TM_FILENAME_BASE} = createSlice({",
            " name: '${TM_FILENAME_BASE/([^A-Z]+)(.+)/$1/}',",
            " initialState,",
            " reducers: {},",
            "})",
            "",
            "export const { actions: ${TM_FILENAME_BASE/([^A-Z]+)(.+)/$1/}Actions } = ${TM_FILENAME_BASE}",
            "export const { reducer: ${TM_FILENAME_BASE/([^A-Z]+)(.+)/$1/}Reducer } = ${TM_FILENAME_BASE}",
            ""
        ],
        "description": "Create redux toolkit slice"
    },

    "Create ToggleFeatures component": {
        "prefix": "tggl",
        "body": ["<ToggleFeatures feature='isAppRedesigned' on={} off={} />"],
        "description": "Create ToggleFeatures component"
    }
}
